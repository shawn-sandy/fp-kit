{"mappings":";;;;;;;;ACAA;;AAuBA,MAAM,4BAAM,GAAG,CAAC,QACd,IAAI,CAAA,YACJ,QAAQ,CAAA,UACR,MAAM,CAAA,YACN,QAAQ,CAAA,WACR,OAAO,CAAA,WACP,OAAO,CAAA,eACP,WAAW,CAAA,EAEX,GAAG,KAAK,EACI,GAAK;IACjB,MAAM,SAAS,GAAW;QACxB,aAAa,EAAE,uBAAuB;QACtC,YAAY,EAAE,uBAAuB;QACrC,OAAO,EAAE,6BAA6B;QACtC,UAAU,EAAE,0BAA0B;QACtC,cAAc,EAAE,4BAA4B;QAC5C,MAAM,EAAE,4BAA4B;QACpC,MAAM,EAAE,yBAAyB;KAClC;IAEF;;IAEG,CACF,MAAM,WAAW,GAAG,CAAC,CAAsC,GAAK;QAC9D,IAAG,CAAC,QAAQ,EACV,OAAO,GAAG,CAAC;KAEd;IAEH;;GAEG,CACD,MAAM,eAAe,GAAG,CAAC,CAAsC,GAAK;QAClE,WAAW,GAAG,CAAC;KAChB;IAEH,iCAAiC,CAC/B,qBACE,gCAAC,QAAM;QACL,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,WAAW;QACpB,WAAW,EAAE,eAAe;QAC5B,KAAK,EAAE;YAAE,GAAG,SAAS;YAAE,GAAG,MAAM;SAAE;QAClC,eAAa,EAAE,QAAQ;QACtB,GAAG,KAAK;kBAER,QAAQ;MACF,CACV;CACF;IAED,wCAAqB,GAAN,4BAAM;;AD3ErB","sources":["src/index.ts","src/components/button.tsx"],"sourcesContent":["export { default as Button } from './components/button';\n","import React from \"react\"\n\n/* Defining the props that the Button component will take. */\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The type of the button.\n   */\n  type: \"button\" | \"submit\" | \"reset\"\n\n  /**\n   * Button label/content\n   */\n  children: React.ReactNode\n  /**\n   * Button styles and props\n   */\n  styles?: object\n  /**\n   * button classes\n   */\n  classes?: string\n}\n\nconst Button = ({\n  type,\n  children,\n  styles,\n  disabled,\n  classes,\n  onClick,\n  onMouseOver,\n\n  ...props\n}: ButtonProps) => {\n  const defStyles: object = {\n    paddingInline: \"var(--btn-px, 1.4rem)\",\n    paddingBlock: \"var(--btn-py, 0.8rem)\",\n    display: \"var(--btn-dsp, inline-flex)\",\n    placeItems: \"var(--btn-place, center)\",\n    justifyContent: \"var(--btn-justify, center)\",\n    cursor: \"var(--btn-cursor, pointer)\",\n    border: \"var(--btn-border, none)\"\n  }\n\n /**\n  * If the button is not disabled, then call the onClick function\n  */\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!disabled) {\n      onClick?.(e)\n    }\n  }\n\n/**\n * A function that returns a function.\n */\n  const handleMouseOver = (e: React.MouseEvent<HTMLButtonElement>) => {\n    onMouseOver?.(e)\n  }\n\n/* Returning a button element. */\n  return (\n    <button\n      type={type}\n      onClick={handleClick}\n      onMouseOver={handleMouseOver}\n      style={{ ...defStyles, ...styles }}\n      aria-disabled={disabled}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n"],"names":[],"version":3,"file":"index.umd.cjs.map"}