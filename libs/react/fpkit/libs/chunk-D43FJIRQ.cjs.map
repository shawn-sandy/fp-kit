{"version":3,"sources":["../src/components/fp.tsx","../src/components/icons/components/svg.tsx","../src/components/icons/components/code.tsx","../src/components/icons/components/home.tsx","../src/components/icons/components/add.tsx","../src/components/icons/components/arrow-left.tsx","../src/components/icons/components/chat.tsx","../src/components/icons/components/arrow-down.tsx","../src/components/icons/components/arrow-up.tsx","../src/components/icons/components/arrow-right.tsx","../src/components/icons/components/user.tsx","../src/components/icons/components/right.tsx","../src/components/icons/components/left.tsx","../src/components/icons/components/minus.tsx","../src/components/icons/components/remove.tsx","../src/components/icons/components/copy.tsx","../src/components/icons/components/up.tsx","../src/components/icons/components/down.tsx","../src/components/icons/components/star.tsx","../src/components/icons/icon.tsx"],"names":["React","jsx","FP","_a","ref","_b","as","renderStyles","styles","children","defaultStyles","props","__objRest","Component","styleObj","__spreadValues","__spreadProps","fp_default","defaultStyes","Svg","fill","strokeColor","size","role","alt","svg_default","jsxs","Code","Home","Add","ArrowLeft","Chat","ArrowDown","ArrowUp","ArrowRight","User","Right","Left","Minus","Remove","Copy","Up","Down","Star","Icon"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { ComponentProps } from '../types'\n\ntype PolymorphicRef<C extends React.ElementType> =\n  React.ComponentPropsWithRef<C>['ref']\n\ntype AsProp<C extends React.ElementType> = {\n  as?: C\n}\n\ntype PropsToOmit<C extends React.ElementType, P> = keyof (AsProp<C> & P)\n\ntype PolymorphicComponentProp<\n  C extends React.ElementType,\n  Props = {},\n> = React.PropsWithChildren<Props & AsProp<C>> &\n  Omit<React.ComponentPropsWithoutRef<C>, PropsToOmit<C, Props>>\n\ntype PolymorphicComponentPropWithRef<\n  C extends React.ElementType,\n  Props = {},\n> = PolymorphicComponentProp<C, Props> & {\n  ref?: PolymorphicRef<C>\n}\n\ntype FPProps<C extends React.ElementType> = PolymorphicComponentPropWithRef<\n  C,\n  {\n    renderStyles?: boolean\n    styles?: {}\n  }\n>\n\n/*\n * FPComponent type definition\n *\n * Defines the component function signature for the FP component.\n *\n * @typeParam C - The HTML element type to render\n * @param props - The component props\n * @returns React component\n */\ntype FPComponent = <C extends React.ElementType = 'span'>(\n  props: FPProps<C>,\n) => React.ReactElement | any\n\n// create an object type and make it optional\ntype styl = {\n  styles?: {}\n}\n\n/**\n * FP component is a polymorphic component that renders an HTML element with optional styles.\n * @param {Object} props - Component props\n * @param {React.ElementType} props.as - The HTML element to render. Defaults to 'div'.\n * @param {boolean} props.renderStyles - Whether to render styles or not. Defaults to true.\n * @param {Object} props.styles - The styles to apply to the component.\n * @param {Object} props.defaultStyles - The default styles to apply to the component.\n * @param {React.ReactNode} props.children - The children to render inside the component.\n * @returns {React.ReactElement} - A React component that renders an HTML element with optional styles.\n */\nconst FP: FPComponent = React.forwardRef(\n  <C extends React.ElementType>(\n    {\n      as,\n      renderStyles = true,\n      styles,\n      children,\n      defaultStyles,\n      ...props\n    }: FPProps<C>,\n    ref?: PolymorphicRef<C>,\n  ) => {\n    const Component = as || 'div'\n\n    const styleObj = renderStyles\n      ? { ...defaultStyles, ...styles }\n      : ({} as React.CSSProperties)\n\n    return (\n      <Component ref={ref} style={styleObj} {...props}>\n        {children}\n      </Component>\n    )\n  },\n)\nexport interface BoxProps extends ComponentProps {\n  elm?: 'div'\n  renderStyles: true\n}\n\nexport default FP\n","import * as React from 'react'\n\nimport { IconProps } from '../types'\n\nconst defaultStyes = {\n  display: 'inline-flex',\n  alignItems: 'center',\n  width: 'auto',\n}\n\nexport const Svg = ({\n  fill = 'currentColor',\n  strokeColor,\n  styles,\n  size,\n  role = 'img',\n  alt,\n  children,\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt' | 'children'\n>) => {\n  return (\n    <svg\n      height={size}\n      width={size}\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={styles}\n      role={role}\n      aria-label={alt}\n      {...props}\n    >\n      {children}\n    </svg>\n  )\n}\n\nexport default Svg\nSvg.displayName = 'Svg'\nSvg.styles = defaultStyes\n","import * as React from 'react'\n\nimport { IconProps } from '../types'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  ...Svg.styles,\n  fill: 'none',\n  stroke: 'currentColor',\n}\n\n/**\n * Renders a code icon.\n *\n * @param {string} strokeColor - The color of the icon's stroke.\n * @param {string} fill - The color of the icon's fill.\n * @param {string} size - The size of the icon.\n * @param {string} viewBox - The viewBox of the icon.\n * @param {React.CSSProperties} styles - The default styles of the icon.\n * @param {IconProps} props - Additional props to apply to the icon.\n * @returns {JSX.Element} - A React component that renders an SVG icon.\n */\nexport const Code = ({\n  strokeColor = 'currentColor',\n  fill = 'none',\n  size = 16,\n  styles,\n  role = 'img',\n  alt = 'Code icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n> = {}) => {\n  return (\n    <Svg size={size} role={role} alt={alt} styles={styles} {...props}>\n      <g\n        fill={fill}\n        stroke={strokeColor}\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"miter\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"2\"\n      >\n        <rect\n          height=\"22\"\n          width=\"18\"\n          fill=\"none\"\n          stroke={strokeColor}\n          x=\"3\"\n          y=\"1\"\n        />\n        <polyline fill=\"none\" points=\"9 9 6 12 9 15\" />\n        <polyline fill=\"none\" points=\"15 15 18 12 15 9\" />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Code\nCode.styles = defaultStyles\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  ...Svg.styles,\n  fill: 'currentColor',\n  stroke: 'none',\n}\n\n/**\n * Renders a home icon.\n *\n * @param {string} strokeColor - The color of the icon's stroke.\n * @param {string} fill - The color of the icon's fill.\n * @param {string} size - The size of the icon.\n * @param {string} viewBox - The viewBox of the icon.\n * @param {string} name - The name of the icon.\n * @param {Object} styles - The styles of the icon.\n * @param {Object} props - The props of the icon.\n * @returns {JSX.Element} - A home icon.\n */\nexport const Home = ({\n  strokeColor = 'currentColor',\n  fill = 'none',\n  size = 16,\n  styles = defaultStyles,\n  role = 'img',\n  alt = 'Home icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} styles={styles} role={role} alt={alt} {...props}>\n      <g\n        fill={fill}\n        stroke={strokeColor}\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"miter\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"2\"\n      >\n        <polygon\n          fill=\"none\"\n          points=\"12 2 2 10 2 23 9 23 9 16 15 16 15 23 22 23 22 10 12 2\"\n          stroke={strokeColor}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Home\nHome.displayName = 'Home'\nHome.styles = defaultStyles\n","import * as React from 'react'\n\nimport { IconProps } from '../types'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  ...Svg.styles,\n  fill: 'currentColor',\n}\n\n/**\n * Add Icon component\n * @param {string} fill - Icon fill color (default: 'currentColor')\n * @param {string} size - Icon size (default: '24')\n * @param {IconProps} props - Other icon properties\n * @returns {JSX.Element} - Rendered component\n */\nexport const Add = ({\n  fill = 'currentColor',\n  size = 24,\n  role = 'img',\n  alt = 'Add icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>): JSX.Element => {\n  return (\n    <Svg size={size} role={role} alt={alt} {...props}>\n      <g fill={fill}>\n        <path\n          d=\"M17,11h-4V7c0-.553-.447-1-1-1s-1,.447-1,1v4H7c-.553,0-1,.447-1,1s.447,1,1,1h4v4c0,.553,.447,1,1,1s1-.447,1-1v-4h4c.553,0,1-.447,1-1s-.447-1-1-1Z\"\n          fill={fill}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Add\nAdd.styles = defaultStyles\nAdd.displayName = 'Add'\n","import * as React from 'react'\n\nimport { IconProps } from '../types'\nimport Svg from './svg'\n\nconst defaultStyles = { ...Svg.styles }\n\n/**\n * Renders an arrow pointing to the left.\n *\n * @param {string} strokeColor - The color of the arrow's stroke.\n * @param {string} fill - The fill color of the arrow.\n * @param {string} size - The size of the arrow.\n * @param {object} styles - The styles to apply to the arrow.\n * @param {object} props - The additional props to pass to the SVG element.\n * @returns {JSX.Element} - A React component that renders an arrow pointing to the left.\n */\nexport const ArrowLeft = ({\n  strokeColor = 'currentColor',\n  fill = 'currentColor',\n  size = 16,\n  styles,\n  role = 'img',\n  alt = 'Arrow pointing left',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} styles={styles} role={role} {...props} alt={alt}>\n      <g fill={fill} strokeMiterlimit=\"10\">\n        <line\n          fill=\"none\"\n          stroke={strokeColor}\n          strokeLinecap=\"butt\"\n          strokeLinejoin=\"miter\"\n          strokeWidth=\"2\"\n          x1=\"22\"\n          x2=\"2\"\n          y1=\"12\"\n          y2=\"12\"\n        />\n        <polyline\n          fill=\"none\"\n          points=\"9,19 2,12 9,5 \"\n          stroke={strokeColor}\n          strokeLinecap=\"square\"\n          strokeLinejoin=\"miter\"\n          strokeWidth=\"2\"\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default ArrowLeft\nArrowLeft.styles = defaultStyles\nArrowLeft.displayName = 'ArrowLeft'\n","import * as React from 'react'\n\nimport { IconProps } from '../types'\nimport Svg from './svg'\n\nconst defaultStyles = { ...Svg.styles }\n\n/**\n * @param {string} size - The width and height of the icon in pixels. Defaults to 24.\n * @param {string} strokeColor - The color of the icon stroke. Defaults to 'currentcolor'.\n * @param {React.CSSProperties} styles - Additional CSS styles to apply to the icon.\n * @param {IconProps} props - Additional props to pass to the SVG element.\n * @returns {JSX.Element} - A chat icon component that displays a speech bubble with lines representing text.\n */\nexport const Chat = ({\n  size = 16,\n  strokeColor = 'currentcolor',\n  styles,\n  role = 'img',\n  alt = 'Chat icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>): JSX.Element => {\n  return (\n    <Svg size={size} styles={styles} role={role} alt={alt} {...props}>\n      <g fill={strokeColor} strokeMiterlimit=\"10\">\n        <path\n          d=\"M21,2H3c-1.105,0-2,.895-2,2V15c0,1.105,.895,2,2,2h5l4,5,4-5h5c1.105,0,2-.895,2-2V4c0-1.105-.895-2-2-2Z\"\n          fill=\"none\"\n          stroke={strokeColor}\n          strokeLinecap=\"square\"\n          strokeLinejoin=\"miter\"\n          strokeWidth=\"2\"\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Chat\nChat.styles = defaultStyles\nChat.displayName = 'Chat'\n","import * as React from 'react'\n\nimport { IconProps } from '../types'\nimport Svg from './svg'\n\nconst defaultStyles = { ...Svg.styles }\n\n/**\n * ArrowDown icon component\n * @param fill - Icon fill color\n * @param strokeColor - Icon stroke color\n * @param styles - Icon styles\n * @param size - Icon size\n */\nexport const ArrowDown = ({\n  fill = 'currentColor',\n  strokeColor,\n  styles,\n  size = 16,\n  role = 'img',\n  alt = 'Down icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} role={role} styles={styles} alt={alt} {...props}>\n      <g fill={fill} strokeMiterlimit=\"10\">\n        <line\n          fill=\"none\"\n          stroke={fill}\n          strokeLinecap=\"butt\"\n          strokeLinejoin=\"miter\"\n          strokeWidth=\"2\"\n          x1=\"12\"\n          x2=\"12\"\n          y1=\"2\"\n          y2=\"22\"\n        />\n        <polyline\n          fill=\"none\"\n          points=\"19,15 12,22 5,15 \"\n          stroke={fill}\n          strokeLinecap=\"square\"\n          strokeLinejoin=\"miter\"\n          strokeWidth=\"2\"\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default ArrowDown\nArrowDown.styles = defaultStyles\nArrowDown.displayName = 'ArrowDown'\n","import * as React from 'react'\n\nimport { IconProps } from '../types'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  ...Svg.styles,\n  fill: 'none',\n  stroke: 'currentColor',\n}\n\n/**\n * ArrowUp icon component\n * @param fill - Icon fill color\n * @param strokeColor - Icon stroke color\n * @param styles - Icon styles\n * @param size - Icon size\n */\nexport const ArrowUp = ({\n  fill = 'currentColor',\n  strokeColor = 'currentColor',\n  styles,\n  size = 16,\n  role = 'img',\n  alt = 'Up arrow icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} styles={styles} role={role} alt={alt} {...props}>\n      <g\n        fill=\"none\"\n        stroke={strokeColor}\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"miter\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"2\"\n      >\n        <line fill=\"none\" strokeLinecap=\"butt\" x1=\"12\" x2=\"12\" y1=\"22\" y2=\"2\" />\n        <polyline fill=\"none\" points=\"5,9 12,2 19,9 \" stroke={strokeColor} />\n      </g>\n    </Svg>\n  )\n}\n\nexport default ArrowUp\nArrowUp.displayName = 'ArrowUp'\nArrowUp.style = defaultStyles\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  ...Svg.styles,\n  fill: 'currentColor',\n}\n\n/*\n * ArrowRight icon component.\n *\n * Renders a right arrow SVG icon.\n *\n * @param {IconProps} props - The component props\n * @param {string} [props.size=\"24\"] - Icon size\n * @param {string} [props.fill=\"currentColor\"] - Icon fill color\n * @param {string} [props.strokeColor=\"currentColor\"] - Stroke color\n *\n * @returns {React.ReactElement} - The rendered icon\n */\nexport const ArrowRight = ({\n  size = 16,\n  fill = 'currentColor',\n  strokeColor = 'currentColor',\n  styles,\n  role = 'img',\n  alt = 'Right arrow icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} styles={styles} role={role} alt={alt} {...props}>\n      <g\n        fill={fill}\n        stroke={strokeColor}\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"miter\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"2\"\n      >\n        <line fill=\"none\" strokeLinecap=\"butt\" x1=\"2\" x2=\"22\" y1=\"12\" y2=\"12\" />\n        <polyline fill=\"none\" points=\"15,5 22,12 15,19 \" stroke={strokeColor} />\n      </g>\n    </Svg>\n  )\n}\n\nexport default ArrowRight\nArrowRight.displayName = 'ArrowRight'\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  ...Svg.styles,\n  fill: 'none',\n  stroke: 'currentColor',\n}\n\nexport const User = ({\n  size = 16,\n  fill = 'none',\n  strokeColor = 'currentColor',\n  styles,\n  alt = 'User Icon',\n  role,\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} role={role} alt={alt} styles={styles} {...props}>\n      <g\n        fill={fill}\n        stroke={strokeColor}\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"miter\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"2\"\n      >\n        <circle cx=\"12\" cy=\"5.5\" fill=\"none\" r=\"4.5\" />\n        <path\n          d=\"M12,14c-4.971,0-9,4.029-9,9H21c0-4.971-4.029-9-9-9Z\"\n          fill=\"none\"\n          stroke={strokeColor}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default User\nUser.styles = defaultStyles\nUser.displayName = 'User'\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  fill: 'currentColor',\n}\n\n/**\n * Renders a right arrow icon.\n *\n * @param {string} size - The size of the icon.\n * @param {string} fill - The fill color of the icon.\n * @param {React.CSSProperties} styles - The styles to apply to the icon.\n * @param {IconProps} props - The props to pass down to the icon.\n * @returns {JSX.Element} - A right arrow icon.\n */\nexport const Right = ({\n  size = 16,\n  fill = 'currentColor',\n  styles,\n  role = 'img',\n  alt = 'Right arrow icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} alt={alt} styles={styles} role={role} {...props}>\n      <g fill={fill}>\n        <path\n          d=\"M7,23a1,1,0,0,1-.707-1.707L15.586,12,6.293,2.707A1,1,0,0,1,7.707,1.293l10,10a1,1,0,0,1,0,1.414l-10,10A1,1,0,0,1,7,23Z\"\n          fill={fill}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Right\nRight.displayName = 'Right'\nRight.styles = defaultStyles\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  ...Svg.styles,\n  fill: 'currentColor',\n}\n\n/**\n * Left arrow icon\n * @param {string} fill - Icon fill color (default: 'currentColor')\n * @param {string} size - Icon size (default: '24')\n * @param {React.CSSProperties} styles - Icon styles (default: {})\n * @param {IconProps} props - Any other valid props for an SVG element\n * @returns {JSX.Element} - Rendered icon component\n */\nexport const Left = ({\n  fill = 'currentColor',\n  size = 16,\n  styles,\n  role = 'img',\n  alt = 'Left arrow icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} styles={styles} alt={alt} role={role} {...props}>\n      <g fill={fill}>\n        <path\n          d=\"M17,23a1,1,0,0,1-.707-.293l-10-10a1,1,0,0,1,0-1.414l10-10a1,1,0,0,1,1.414,1.414L8.414,12l9.293,9.293A1,1,0,0,1,17,23Z\"\n          fill={fill}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Left\nLeft.displayName = 'Left'\nLeft.styles = defaultStyles\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  fill: 'currentColor',\n}\n\n/**\n * Minus icon component\n * @param {string} size - Icon size (default: 24)\n * @param {string} fill - Icon fill color (default: 'currentColor')\n * @param {object} styles - Inline styles for the SVG element\n * @param {object} props - Any other SVG attributes\n * @returns {JSX.Element} - Rendered Minus icon component\n */\nexport const Minus = ({\n  size = 24,\n  fill = 'currentColor',\n  styles,\n  role = 'img',\n  alt = 'Minus icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} styles={styles} role={role} alt={alt} {...props}>\n      <g fill={fill}>\n        <path\n          d=\"M17,11H7c-.553,0-1,.447-1,1s.447,1,1,1h10c.553,0,1-.447,1-1s-.447-1-1-1Z\"\n          fill={fill}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Minus\nMinus.displayName = 'Minus'\nMinus.styles = defaultStyles\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  fill: 'currenStyle',\n}\n\n/**\n * Remove icon component\n * @param {string} size - The size of the icon\n * @param {string} fill - The fill color of the icon\n * @param {object} styles - The styles to apply to the icon\n * @param {object} props - The additional props to pass to the icon\n * @returns {JSX.Element} - The Remove icon component\n */\nexport const Remove = ({\n  size = 16,\n  fill = 'currentColor',\n  styles,\n  role = 'img',\n  alt = 'Remove icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} alt={alt} styles={styles} role={role} {...props}>\n      <g fill={fill}>\n        <path\n          d=\"M19.7,4.3c-0.4-0.4-1-0.4-1.4,0L12,10.6L5.7,4.3c-0.4-0.4-1-0.4-1.4,0s-0.4,1,0,1.4l6.3,6.3l-6.3,6.3 c-0.4,0.4-0.4,1,0,1.4C4.5,19.9,4.7,20,5,20s0.5-0.1,0.7-0.3l6.3-6.3l6.3,6.3c0.2,0.2,0.5,0.3,0.7,0.3s0.5-0.1,0.7-0.3 c0.4-0.4,0.4-1,0-1.4L13.4,12l6.3-6.3C20.1,5.3,20.1,4.7,19.7,4.3z\"\n          fill={fill}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Remove\nRemove.displayName = 'Remove'\nRemove.styles = defaultStyles\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nconst defaultStyles = {\n  ...Svg.styles,\n  stroke: 'currentColor',\n}\n\n/**\n * Copy icon component\n * @param {string} size - The width and height of the icon\n * @param {string} strokeColor - The color of the icon stroke\n * @param {IconProps} props - The icon component props\n * @returns {JSX.Element} - A react JSX element representing the copy icon\n */\nexport const Copy = ({\n  size = 16,\n  strokeColor = 'currentColor',\n  styles,\n  role = 'img',\n  alt = 'Copy icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>): JSX.Element => {\n  return (\n    <Svg size={size} styles={styles} role={role} alt={alt} {...props}>\n      <g\n        fill=\"none\"\n        stroke={strokeColor}\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"miter\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"2\"\n      >\n        <polyline\n          fill=\"none\"\n          points=\"8 19 2 19 2 1 17 1 17 6\"\n          stroke={strokeColor}\n        />\n        <rect height=\"13\" width=\"10\" fill=\"none\" x=\"12\" y=\"10\" />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Copy\nCopy.displayName = 'Copy'\nCopy.styles = defaultStyles\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nconst defaultStyles = { ...Svg.styles }\nexport const Up = ({\n  size = 16,\n  fill = 'currentColor',\n  styles,\n  role = 'img',\n  alt = 'Up arrow icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} alt={alt} styles={styles} role={role} {...props}>\n      <g fill={fill}>\n        <path\n          d=\"M22,18a1,1,0,0,1-.707-.293L12,8.414,2.707,17.707a1,1,0,0,1-1.414-1.414l10-10a1,1,0,0,1,1.414,0l10,10A1,1,0,0,1,22,18Z\"\n          fill={fill}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Up\nUp.displayName = 'Up'\nUp.styles = defaultStyles\n","import * as React from 'react'\n\nimport { IconProps } from '../types'\nimport Svg from './svg'\n\nconst defaultStyles = { ...Svg.styles }\n\nexport const Down = ({\n  size = 16,\n  fill = 'currentColor',\n  styles,\n  role = 'img',\n  alt = 'Down arrow icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) => {\n  return (\n    <Svg size={size} alt={alt} styles={styles} role={role} {...props}>\n      <g fill={fill}>\n        <path\n          d=\"M12,18a1,1,0,0,1-.707-.293l-10-10A1,1,0,0,1,2.707,6.293L12,15.586l9.293-9.293a1,1,0,1,1,1.414,1.414l-10,10A1,1,0,0,1,12,18Z\"\n          fill={fill}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Down\nDown.displayName = 'Down'\nDown.styles = defaultStyles\n","import { IconProps } from '../types'\nimport React from 'react'\nimport Svg from './svg'\n\nexport function Star({\n  size = 16,\n  fill = 'currentColor',\n  strokeColor = 'currentColor',\n  styles,\n  role = 'img',\n  alt = 'Star icon',\n  ...props\n}: Pick<\n  IconProps,\n  'strokeColor' | 'fill' | 'styles' | 'size' | 'role' | 'alt'\n>) {\n  return (\n    <Svg size={size} alt={alt} styles={styles} role={role} {...props}>\n      <g\n        fill=\"none\"\n        stroke={strokeColor}\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"miter\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"2\"\n      >\n        <polygon\n          fill=\"none\"\n          points=\"12,2.49 15.09,8.75 22,9.754 17,14.628 18.18,21.51 12,18.262 5.82,21.51 7,14.628 2,9.754 8.91,8.75 \"\n          stroke={strokeColor}\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport default Star\nStar.displayName = 'Star'\n","import {\n  Add,\n  ArrowDown,\n  ArrowLeft,\n  ArrowRight,\n  ArrowUp,\n  Chat,\n  Code,\n  Copy,\n  Down,\n  Home,\n  Left,\n  Minus,\n  Remove,\n  Right,\n  Star,\n  Up,\n  User,\n} from './index'\n\nimport { ComponentProps } from '#/types'\nimport FP from '#components/fp'\nimport React from 'react'\n\nexport interface IconProps extends Partial<ComponentProps> {\n  fill?: string\n  size?: string\n  viewBox?: string\n  name?: string\n}\n\nexport const defaultStyles = {\n  display: 'inline-flex',\n  direction: 'row',\n  gap: '.2rem',\n  placeItems: 'center',\n  width: 'auto',\n}\n\n/**\n * Icon component wraps svg in a div.\n * @param {IconProps} props - The props object for the Icon component.\n * @param {React.ReactNode} props.children - The children of the Icon component.\n * @param {Object} props.styles - The styles object for the Icon component.\n * @returns {JSX.Element} - The Icon component.\n */\nexport const Icon = ({ children, styles, ...props }: IconProps) => {\n  return (\n    <FP as=\"span\" styles={styles} data-style=\"icons\" {...props}>\n      {children}\n    </FP>\n  )\n}\n\nexport default Icon\nIcon.Add = Add\nIcon.ArrowDown = ArrowDown\nIcon.ArrowLeft = ArrowLeft\nIcon.ArrowRight = ArrowRight\nIcon.ArrowUp = ArrowUp\nIcon.Chat = Chat\nIcon.Code = Code\nIcon.Copy = Copy\nIcon.displayName = 'Icon'\nIcon.Home = Home\nIcon.Left = Left\nIcon.Minus = Minus\nIcon.Remove = Remove\nIcon.Right = Right\nIcon.Star = Star\nIcon.styles = defaultStyles\nIcon.Up = Up\nIcon.Down = Down\nIcon.User = User\n"]}